一，管道读写规则
当没有数据可读时

O_NONBLOCK disable：read调用阻塞，即进程暂停执行，一直等到有数据来到为止。
O_NONBLOCK enable：read调用返回-1，errno值为EAGAIN。
当管道满的时候

O_NONBLOCK disable： write调用阻塞，直到有进程读走数据
O_NONBLOCK enable：调用返回-1，errno值为EAGAIN
如果所有管道写端对应的文件描述符被关闭，则read返回0

如果所有管道读端对应的文件描述符被关闭，则write操作会产生信号SIGPIPE

当要写入的数据量不大于PIPE_BUF时，linux将保证写入的原子性。

当要写入的数据量大于PIPE_BUF时，linux将不再保证写入的原子性。

缺省情况下，管道工作在阻塞方式下。进程读取管道时，如果管道为空，则读操作一直阻塞直到数据到达；进程写管道时，如果管道已满，写操作会阻塞进程直到足够数据被读出。

可以使用fcntl(fd, F_SETFL, O_NONBLOCK)设置管道工作为非阻塞IO方式。管道为空时，read接口会立即返回-1，errno设置为EAGAIN；管道满时，write接口会立即返回-1；errno设置为EAGAIN。

如果所有写端关闭，读端read操作会返回0(EOF)。如果所有读端关闭，write操作会给调用进程发送SIGPIPE信号，如果调用进程忽 略SIGPIPE信号，则write操作会返回失败，并设置errno为EPIPE。使用pipe和fork的进程需要正确使用close关闭多于的 fd，以确保EOF和SIGPIPE/EPIPE传递正确。

其他注意事项：

1、管道是字节流通信，没有消息边界的概念；

2、管道只能在具有共同祖先的进程间使用；

3、不能对管道进行lseek操作；

实际使用中，还有两个概念对理解管道至关重要。一个是管道容量。另一个是管道操作原子性。

管道容量有限。如果管道满，阻塞方式下write操作会阻塞，非阻塞方式下会返回失败。不同的系统有不同的管道容量限制。应用模块不应该依赖特定 的容量限制，正确的设计是：一旦数据到达进程应尽快消费数据，避免写进程长时间阻塞。从linux 2.6.11版本开始，管道容量是65536字节。

POSIX 1-2001规定向管道写小于PIPE_BUF字节长度的数据时原子操作；写超过PIPE_BUF字节长度的数据不是原子操作。Linux上PIPE_BUF是4096字节，更细致的描述：

1、阻塞方式，n<=PIPE_BUF(n为写入的字节数，下同)：写操作是原子操作，如果pipe空间不足则阻塞。

2、非阻塞方式，n<=PIPE_BUF：写操作是原子操作，如果pipe空间不足，则失败，errno设置为EAGAIN。

3、阻塞方式，n>PIPE_BUF：写操作不是原子操作，写入的数据可能与其他进程写入的交叉排列，写操作阻塞直到所有数据写完。

4、非阻塞方式，n>PIPE_BUF：写操作不是原子操作，如果pipe空间不足，则失败，errno设置为EAGAIN。写入的数据可能与其他进程写入的数据交叉排列。同时实际写入可能小于n(部分写入)；调用者应该检查write实际写入的长度。

命名管道
FIFO又称命名管道。它使用mkfifo创建，使用open打开。只要有权限任何进程都可以打开一个管道，读端使用O_RDONLY标准打开FIFO，写端使用O_WRONLY标准打开FIFO。

FIFO与管道的唯一差别是创建和打开方式不同，在它们之上的IO操作时完全相同。一个给定的FIFO有多个写进程是很常见的。这就意味着如果不希望多进程所写的的数据互相穿插，则需要考虑原子写操作(如管道相同)。

应用场景
管道的有点是编程简单易用。

管道也存在一些不足：

1、需要通过内核传递数据

2、管道容量(64k)和PIPE_BUF不能修改

3、管道传递的是流。同步方式下编程比较复杂

因此管道适用于那些数据量少，性能要求不高的场合。

